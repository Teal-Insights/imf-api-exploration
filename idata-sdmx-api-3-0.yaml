openapi: 3.0.1
info:
  title: SDMX 3.0 API
  description: "SDMX version 3.0 introduces new features, improvements and changes to the information model, structural metadata artifacts, and data queries. Learn more about SDMX 3.0 changes [here](https://sdmx.org/wp-content/uploads/SDMX_3-0-0_Major_Changes_FINAL-1_0.pdf).\n\nThe IMF API allows developers to build applications and integrate IMF data. You can use the IMF APIs to import economic and financial data from databases available on http://data.imf.org/ into your data systems or applications. For additional information on working with the API, refer to the [Help here](https://datasupport.imf.org/knowledge?id=knowledge_category&sys_kb_id=&category_id=9959b2bc1b6391903dba646fbd4bcb6a). For questions, contact datahelp@imf.org."
  version: '1.0'
servers:
  - url: https://api.imf.org/external/sdmx/3.0
paths:
  '/structure/{structureType}/{agencyID}/{resourceID}/{version}':
    get:
      tags:
        - Structure queries
      summary: 'Structure Query [Structure Type, Agency, Resource, Version]'
      description: "Structure queries when no item is specified. The item is equivalent to \"*\".\n\nStructure queries in SDMX allow you to retrieve structural metadata at various levels of granularity, from all structural metadata available in the source to a single code from a particular version of a particular codelist maintained by a particular agency.\n"
      operationId: get-structure-structuretype-agencyid-resourceid-version
      parameters:
        - name: structureType
          in: path
          description: 'The type of structural metadata (e.g. codelist, dataflow, etc.)'
          required: true
          schema:
            enum:
              - datastructure
              - metadatastructure
              - dataflow
              - metadataflow
              - provisionagreement
              - structureset
              - process
              - categorisation
              - dataconstraint
              - metadataconstraint
              - conceptscheme
              - codelist
              - categoryscheme
              - hierarchy
              - hierarchyassociation
              - agencyscheme
              - dataproviderscheme
              - dataconsumerscheme
              - organisationunitscheme
              - transformationscheme
              - rulesetscheme
              - userdefinedoperatorscheme
              - customtypescheme
              - namepersonalisationscheme
              - vtlmappingscheme
              - valuelist
              - structuremap
              - representationmap
              - conceptschememap
              - categoryschememap
              - organisationschememap
              - reportingtaxonomymap
              - '*'
            type: string
            default: codelist
          example: codelist
        - name: agencyID
          in: path
          description: "The maintainer(s) of the artefacts.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available maintainers.\n"
          required: true
          schema:
            type: array
            default: IMF
          example: IMF
        - name: resourceID
          in: path
          description: "The artefact ID(s).\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n"
          required: true
          schema:
            type: array
            default: CL_COUNTRY
          example: CL_COUNTRY
        - name: version
          in: path
          description: "The version(s) of the artefact.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n\n`+` can be used to retrieve the latest stable version.\n\n`~` can be used to retrieve the latest version, regardless of its status (stable, draft, etc.).\n"
          required: true
          schema:
            type: array
            default: +
          example: +
        - name: detail
          in: query
          description: "This attribute specifies the desired amount of information to be returned. For example, it is possible to instruct the web service to return only basic information about the maintainable artefact (i.e.: id, agency id, version and name). Most notably, items of item schemes will not be returned (for example, it will not return the codes in a code list query).\n\nPossible values are:\n\n`full` - all available information for all returned artefacts should be returned. Returned extended codelists are to be resolved, i.e. include all inherited codes, and must not include the CodelistExtension property. As the inherited codelists must be resolved, they should not be returned a second time as separated codelists.\n\n`allstubs` - all returned artefacts should be returned as stubs, i.e. only containing identification information and the artefacts' name.\n\n`referencestubs` - same as full with the exception that referenced artefacts should be returned only as stubs, i.e. only containing identification information and the artefacts' name.\n\n`allcompletestubs` all returned artefacts should be returned as complete stubs, i.e. only containing identification information, the artefacts' name, description and annotations.\n\n`referencecompletestubs` - same as full with the exception that referenced artefacts should be returned as complete stubs, i.e. only containing identification information, the artefacts' name, description and annotations.\n\n`referencepartial` - same as full with the exception that referenced item schemes should only include items used by the artefact to be returned.\n\n`raw` - same as full with the exception that the returned extended codelists are not resolved and must include the CodelistExtension property, and if referenced codelists or descendants are to be returned then they include also all inherited codelists."
          schema:
            enum:
              - full
              - allstubs
              - referencestubs
              - allcompletestubs
              - referencecompletestubs
              - referencepartial
              - raw
            type: string
            default: full
          example: full
        - name: references
          in: query
          description: "This attribute instructs the web service to return (or not) the artefacts referenced by the artefact to be returned (for example, the code lists and concepts used by the data structure definition matching the query), as well as the artefacts that use the matching artefact (for example, the dataflows that use the data structure definition matching the query).\n\nPossible values are:\n\n`none` - no references will be returned\n\n`parents` - the artefacts that use the artefact matching the query\n\n`parentsandsiblings` - the artefacts that use the artefact matching the query, as well as the artefacts referenced by these artefacts\n\n`ancestors` - the artefacts that use the artefact matching the query, up to any level\n\n`children` - artefacts referenced by the artefact to be returned\n\n`descendants` - references of references, up to any level, will also be returned\n\n`all` - the combination of parentsandsiblings and descendants.\n\nIn addition, a concrete type of resource may also be used (for example, `references`=`codelist`)."
          schema:
            type: array
            default: none
          example: none
        - name: asOf
          in: query
          description: "Format - date-time (as date-time in RFC3339). Retrieve the resource as it was at the supplied point in time (aka time travel).\n"
          schema:
            type: string
            format: date-time
        - name: Accept
          in: header
          description: "Specifies the output format. \n\n`application/json` (the default) indicates that output format is a json.\n"
          schema:
            enum:
              - application/json
              - application/xml
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  codeLists:
                    - agencyID: SDMX
                      annotations:
                        - id: origin
                          text: 
                          title: 
                          type: 
                          value: INTEGRATION
                        - id: isFinal
                          text: 
                          title: 
                          type: 
                          value: 
                        - id: lastUpdatedAt
                          text: 
                          title: 
                          type: 
                          value: '2023-02-21T07:31:30.0000000+00:00'
                      codes:
                        - annotations: [ ]
                          description: To be used for data collected or disseminated every year.
                          descriptions:
                            en: To be used for data collected or disseminated every year.
                          id: A
                          name: Annual
                          names:
                            en: Annual
                      description: 'This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept \u201Cfrequency\u201D may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.'
                      descriptions:
                        en: 'This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept \u201Cfrequency\u201D may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.'
                      id: CL_FREQ
                      isPartial: true
                      links:
                        - rel: self
                          type: codelist
                          urn: urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)
                      name: Frequency
                      names:
                        en: Frequency
                      version: '2.0'
                meta:
                  contentLanguages:
                    - en
                  id: IDREF9418
                  prepared: '2023-08-17T12:34:35.0000000+00:00'
                  schema: https://raw.githubusercontent.com/sdmx-twg/sdmx-json/sdmx3.0.0/metadata-message/tools/schemas/2.0.0/sdmx-json-metadata-schema.json
                  sender:
                    id: unknown
                  test: false
            application/xml:
              schema:
                type: object
              example: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<message:Structure xmlns:message=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/message\" xmlns:structure=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/structure\" xmlns:common=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/common\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xsi:schemaLocation=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/message ../../schemas/SDMXMessage.xsd\">\r\n    <message:Header>\r\n        <message:ID>IDREF6142</message:ID>\r\n        <message:Test>false</message:Test>\r\n        <message:Prepared>2023-08-17T14:39:32.567530217Z</message:Prepared>\r\n        <message:Sender id=\"unknown\"/>\r\n    </message:Header>\r\n    <message:Structures>\r\n        <structure:Codelists>\r\n            <structure:Codelist urn=\"urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)\" agencyID=\"SDMX\" id=\"CL_FREQ\" version=\"2.0\" isExternalReference=\"false\" isPartial=\"true\">\r\n                <common:Annotations>\r\n                    <common:Annotation id=\"origin\">\r\n                        <common:AnnotationValue>INTEGRATION</common:AnnotationValue>\r\n                    </common:Annotation>\r\n                    <common:Annotation id=\"isFinal\"/>\r\n                    <common:Annotation id=\"lastUpdatedAt\">\r\n                        <common:AnnotationValue>2023-02-21T19:31:30.726036Z</common:AnnotationValue>\r\n                    </common:Annotation>\r\n                </common:Annotations>\r\n                <common:Link url=\"urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)\" type=\"codelist\" rel=\"self\"/>\r\n                <common:Name xml:lang=\"en\">Frequency</common:Name>\r\n                <common:Description xml:lang=\"en\">This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept “frequency” may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.</common:Description>\r\n                <structure:Code id=\"A\">\r\n                    <common:Name xml:lang=\"en\">Annual</common:Name>\r\n                    <common:Description xml:lang=\"en\">To be used for data collected or disseminated every year.</common:Description>\r\n                </structure:Code>\r\n            </structure:Codelist>\r\n        </structure:Codelists>\r\n    </message:Structures>\r\n</message:Structure>"
  '/availability/{context}/{agencyID}/{resourceID}/{version}/{key}/{componentID}':
    get:
      tags:
        - Data availability queries
      summary: Data Availability Query
      description: "See which data would match a query, without actually retrieving these data.\n\nThis can be used, for example, to build a data query form that enables users of the UI to create a data query by selecting dimension values. \nFor example the user is able to click 'Reporting Country' and then select the codes 'United Kingdom', 'Greece', and 'Switzerland'.\n\nThe query returns a `Constraint`, i.e. structural metadata, and is therefore similar to the other structural metadata queries but \nthe query itself is more akin to a data query.\n"
      operationId: get-availability-context-agencyid-resourceid-version-key-componentid
      parameters:
        - name: context
          in: path
          description: The context for data retrieval. All possible contexts can be selected using `*`.
          required: true
          schema:
            enum:
              - datastructure
              - dataflow
              - provisionagreement
              - '*'
            type: string
            default: dataflow
          example: dataflow
        - name: agencyID
          in: path
          description: "The maintainer(s) of the artefacts.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available maintainers.\n"
          required: true
          schema:
            type: array
            default: IMF.STA
          example: IMF.STA
        - name: resourceID
          in: path
          description: "The artefact ID(s).\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n"
          required: true
          schema:
            type: array
            default: CPI
          example: CPI
        - name: version
          in: path
          description: "The version(s) of the artefact.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n\n`+` can be used to retrieve the latest stable version.\n\n`~` can be used to retrieve the latest version, regardless of its status (stable, draft, etc.).\n"
          required: true
          schema:
            type: array
            default: +
          example: +
        - name: key
          in: path
          description: "The combination of dimension values identifying series or slices of the cube (for example `D.USD.EUR.SP00.A`).\n\nMultiple values are possible. Wildcards are supported using `*` (`D.*.EUR.SP00.A`).\n"
          required: true
          schema:
            type: array
            default: USA.CPI.*.IX.M
          example: USA.CPI.*.IX.M
        - name: componentID
          in: path
          description: "The ID of the dimension for which to obtain availability information.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available dimensions.\n"
          required: true
          schema:
            type: array
            default: COICOP_1999
          example: COICOP_1999
        - name: c
          in: query
          description: "Filter data by component value (e.g. c[FREQ]=A).\n\nMultiple values are supported.\n\nIn addition, operators may be used:\n\nOperator | Meaning | Note\n-- | -- | --\neq | Equals | Default if no operator is specified and there is only one value (e.g. `c[FREQ]=M` is equivalent to `c[FREQ]=eq:M`)\nne | Not equal to |\nlt | Less than |\nle | Less than or equal to |\ngt | Greater than |\nge | Greater than or equal to |\nco | Contains |\nnc | Does not contain |\nsw | Starts with |\new | Ends with |\n\nOperators appear as prefix to the component value(s) and are separated from it by a `:` (e.g. `c[TIME_PERIOD]=ge:2020-01+le:2020-12`).\n"
          schema:
            type: object
        - name: updatedAfter
          in: query
          description: "Format - date-time (as date-time in RFC3339). The last time the query was performed by the client. \n\nIf this parameter is used, the returned message should only include the dimension values for the data that have changed since that point in time (updates and revisions).\n"
          schema:
            type: string
            format: date-time
        - name: references
          in: query
          description: "Instructs the web service to return (or not) the artefacts referenced by the ContentConstraint to be returned.\n\nMultiple values are supported.\n"
          schema:
            enum:
              - none
              - all
              - datastructure
              - conceptscheme
              - codelist
              - dataproviderscheme
              - dataflow
            type: string
            default: none
          example: none
        - name: mode
          in: query
          description: "Instructs the web service to return a ContentConstraint which defines a Cube Region containing values which will be returned by executing the query (`exact`) vs a Cube Region showing what values remain valid selections that could be added to the data query (`available`).\n"
          schema:
            enum:
              - exact
              - available
            type: string
            default: exact
          example: exact
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  dataConstraints:
                    - agencyID: QUANTHUB
                      annotations:
                        - id: series_count
                          text: 
                          title: '397820'
                          type: sdmx_metrics
                          value: 
                        - id: time_period_start
                          text: 
                          title: '2018-01-01'
                          type: sdmx_metrics
                          value: 
                        - id: time_period_end
                          text: 
                          title: '2021-01-01'
                          type: sdmx_metrics
                          value: 
                      constraintAttachment:
                        dataStructures:
                          - urn:sdmx:org.sdmx.infomodel.datastructure.DataStructure=QUANTHUB:ECOFIN_DSD(1.2)
                      cubeRegions:
                        - components:
                            - id: FREQ
                              include: false
                              removePrefix: false
                              values:
                                - value: A
                                - value: Q
                          include: true
                          keyValues: [ ]
                      description: Data Availability Constraint
                      descriptions:
                        en: Data Availability Constraint
                      id: BOP6
                      links:
                        - rel: self
                          type: dataconstraint
                          urn: urn:sdmx:org.sdmx.infomodel.registry.DataConstraint=QUANTHUB:BOP6(1.2)
                      name: Data Constraint
                      names:
                        en: Data Constraint
                      role: Allowed
                      version: '2023-01-02'
                meta:
                  contentLanguages:
                    - en
                  id: IDREF9519
                  prepared: '2023-08-17T03:03:28.0000000+00:00'
                  schema: https://raw.githubusercontent.com/sdmx-twg/sdmx-json/sdmx3.0.0/metadata-message/tools/schemas/2.0.0/sdmx-json-metadata-schema.json
                  sender:
                    id: unknown
                  test: false
  '/data/{context}/{agencyID}/{resourceID}/{version}/{key}':
    get:
      tags:
        - Data queries
      summary: Data Query
      description: "Data queries allow **retrieving statistical data**. \n\nEntire datasets can be retrieved or individual observations, or anything in between, using filters on dimensions (including time), attributes and/or measures. \n\nAll data matching a query can be retrieved or only the data that has changed since the last time the same query was performed. \n\nUsing the _includeHistory_ parameter, it is also possible to retrieve previous versions of the data. \n\nLast but not least, the data retrieved can be packaged in different ways (as time series, cross-sections or as a table), in a variety of formats (JSON, XML, CSV, etc.).\n"
      operationId: get-data-context-agencyid-resourceid-version-key
      parameters:
        - name: context
          in: path
          description: The context for data retrieval. All possible contexts can be selected using `*`.
          required: true
          schema:
            enum:
              - datastructure
              - dataflow
              - provisionagreement
              - '*'
            type: string
            default: dataflow
          example: dataflow
        - name: agencyID
          in: path
          description: "The maintainer(s) of the artefacts.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available maintainers.\n"
          required: true
          schema:
            type: array
            default: IMF.STA
          example: IMF.STA
        - name: resourceID
          in: path
          description: "The artefact ID(s).\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n"
          required: true
          schema:
            type: array
            default: CPI
          example: CPI
        - name: version
          in: path
          description: "The version(s) of the artefact.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n\n`+` can be used to retrieve the latest stable version.\n\n`~` can be used to retrieve the latest version, regardless of its status (stable, draft, etc.).\n"
          required: true
          schema:
            type: array
            default: +
          example: +
        - name: key
          in: path
          description: "The combination of dimension values identifying series or slices of the cube (for example `D.USD.EUR.SP00.A`).\n\nMultiple values are possible. Wildcards are supported using `*` (`D.*.EUR.SP00.A`).\n"
          required: true
          schema:
            type: array
            default: USA.CPI.*.IX.M
          example: USA.CPI.*.IX.M
        - name: c
          in: query
          description: "Filter data by component value (e.g. c[FREQ]=A).\n\nMultiple values are supported.\n\nIn addition, operators may be used:\n\nOperator | Meaning | Note\n-- | -- | --\neq | Equals | Default if no operator is specified and there is only one value (e.g. `c[FREQ]=M` is equivalent to `c[FREQ]=eq:M`)\nne | Not equal to |\nlt | Less than |\nle | Less than or equal to |\ngt | Greater than |\nge | Greater than or equal to |\nco | Contains |\nnc | Does not contain |\nsw | Starts with |\new | Ends with |\n\nOperators appear as prefix to the component value(s) and are separated from it by a `:` (e.g. `c[TIME_PERIOD]=ge:2020-01+le:2020-12`).\n"
          schema:
            type: object
        - name: updatedAfter
          in: query
          description: "Format - date-time (as date-time in RFC3339). The last time the query was performed by the client. \n\nIf this parameter is used, the returned message should only include the dimension values for the data that have changed since that point in time (updates and revisions).\n"
          schema:
            type: string
            format: date-time
        - name: firstNObservations
          in: query
          description: 'The maximum number of observations to be returned for each of the matching series, starting from the first observation.'
          schema:
            type: integer
        - name: lastNObservations
          in: query
          description: 'The maximum number of observations to be returned for each of the matching series, counting back from the most recent observation.'
          schema:
            type: integer
        - name: dimensionAtObservation
          in: query
          description: "This parameter allows the client to indicate how the data should be packaged by the service.\n\nThe options are:\n* For datasets **with** time dimension:\n    * `TIME_PERIOD`: A timeseries view\n    * `AllDimensions`: A flat view of the data.\n* For datasets **without** time dimension:\n    * `AllDimensions`: A flat view of the data.\n    * The ID of any dimension: A cross-sectional view of the data.\n"
          schema:
            type: string
            default: TIME_PERIOD
          example: TIME_PERIOD
        - name: attributes
          in: query
          description: "The attributes to be returned. \n\nFor example, it is possible to instruct the web service to return data only (i.e. no attributes).\n"
          schema:
            type: array
            default: dsd
          example: dsd
        - name: measures
          in: query
          description: The measures to be returned.
          schema:
            type: array
            default: all
          example: all
        - name: includeHistory
          in: query
          description: "This attribute allows retrieving previous versions of the data, as they were disseminated in the past (*history* or *timeline* functionality).\n"
          schema:
            type: boolean
            default: false
          example: all
        - name: asOf
          in: query
          description: "Format - date-time (as date-time in RFC3339). Retrieve the resource as it was at the supplied point in time (aka time travel).\n"
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  dataSets:
                    - action: Information
                      series:
                        0:0:0:0:0:0:
                          attributes:
                            - 
                          observations:
                            '0':
                              - '-803260893.854749'
                              - 0
                              - 
                            '1':
                              - '-755969273.743017'
                              - 0
                              - 
                      structure: 0
                  structures:
                    - annotations: [ ]
                      attributes:
                        dataSet:
                          - id: COMMENT
                            isMandatory: false
                            relationship:
                              dataflow: { }
                            roles: [ ]
                            values: [ ]
                          - id: BASE_PER
                            isMandatory: false
                            relationship:
                              dataflow: { }
                            roles: [ ]
                            values: [ ]
                        observation:
                          - id: UNIT_MULT
                            isMandatory: false
                            relationship:
                              observation: { }
                            roles: [ ]
                            values:
                              - id: '6'
                              - id: '0'
                          - id: OBS_STATUS
                            isMandatory: false
                            relationship:
                              observation: { }
                            roles: [ ]
                            values: [ ]
                        series:
                          - id: TIME_FORMAT
                            isMandatory: false
                            relationship:
                              dimensions:
                                - DATA_DOMAIN
                                - REF_AREA
                                - INDICATOR
                                - COUNTERPART_AREA
                                - FREQ
                                - DATA_TYPE
                            roles: [ ]
                            values: [ ]
                      dataSets:
                        - 0
                      dimensions:
                        observation:
                          - id: TIME_PERIOD
                            keyPosition: 6
                            values:
                              - value: '2011'
                              - value: '2012'
                        series:
                          - id: DATA_DOMAIN
                            keyPosition: 0
                            roles: [ ]
                            values:
                              - id: BOP6
                          - id: REF_AREA
                            keyPosition: 1
                            roles: [ ]
                            values:
                              - id: 1C_355
                      links:
                        - title: Dataflow
                          urn: urn:sdmx:org.sdmx.infomodel.datastructure.Dataflow=IMF:BOP6_PRIVATE(1.2)
                        - title: DataStructureDefinition
                          urn: urn:sdmx:org.sdmx.infomodel.datastructure.DataStructure=IMF:ECOFIN_DSD(1.2)
                      measures:
                        observation:
                          - id: OBS_VALUE
                            roles: [ ]
                meta: { }
  '/metadata/metadataset/{providerID}/{metadatasetID}/{version}':
    get:
      tags:
        - Metadata queries
      summary: 'Metadata Query [by Metadatasets]'
      description: "These queries enable clients to find metadatasets by the identification of the metadataset, enabling clients to checkout specific reports.\n"
      operationId: get-metadata-metadataset-providerid-resourceid-version
      parameters:
        - name: providerID
          in: path
          description: "The provider of metadata.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available providers.\n"
          required: true
          schema:
            type: array
            default: '*'
          example: '*'
        - name: metadatasetID
          in: path
          description: "The artefact ID(s).\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n"
          required: true
          schema:
            type: array
            default: '*'
          example: '*'
        - name: version
          in: path
          description: "The version(s) of the artefact.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n\n`+` can be used to retrieve the latest stable version.\n\n`~` can be used to retrieve the latest version, regardless of its status (stable, draft, etc.).\n"
          required: true
          schema:
            type: array
            default: +
          example: +
        - name: detail
          in: query
          description: "This attribute specifies the desired amount of information to be returned. For example, it is possible to instruct the web service to return only basic information about the metadataset (i.e.: id, dataprovider id, version and name).\n\nMost notably, metadata attributes of a metadataset will not be returned Possible values are:\n1. `full`: all available information for all returned metadatasets should be returned.\n2. `allstubs`: all returned metadatasets should be returned as stubs, i.e. only containing identification information and the metadataset' name.\n"
          schema:
            enum:
              - allstubs
              - full
            type: string
            default: allstubs
          example: allstubs
        - name: asOf
          in: query
          description: "Format - date-time (as date-time in RFC3339). Retrieve the resource as it was at the supplied point in time (aka time travel).\n"
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  metadataSets: [ ]
                meta:
                  contentLanguages:
                    - en
                  id: IDREF7221
                  prepared: '2023-08-17T03:11:32.0000000+00:00'
                  schema: https://raw.githubusercontent.com/sdmx-twg/sdmx-json/sdmx3.0.0/metadata-message/tools/schemas/2.0.0/sdmx-json-metadata-schema.json
                  sender:
                    id: unknown
                  test: false
  '/metadata/metadataflow/{flowAgencyID}/{flowID}/{flowVersion}/{providerRef}':
    get:
      tags:
        - Metadata queries
      summary: 'Metadata Query [by Metadataflow]'
      description: "These queries enable clients to find metadatasets by the collection (metadataflow), optionally filtered by the metadata provider.\n"
      operationId: get-metadata-metadataflow-agencyid-resourceid-version-providerid
      parameters:
        - name: flowAgencyID
          in: path
          description: "The maintainer(s) of the artefacts.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available maintainers.\n"
          required: true
          schema:
            type: array
            default: '*'
          example: '*'
        - name: flowID
          in: path
          description: "The artefact ID(s).\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n"
          required: true
          schema:
            type: array
            default: '*'
          example: '*'
        - name: flowVersion
          in: path
          description: "The version(s) of the artefact.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n\n`+` can be used to retrieve the latest stable version.\n\n`~` can be used to retrieve the latest version, regardless of its status (stable, draft, etc.).\n"
          required: true
          schema:
            type: array
            default: +
          example: +
        - name: providerRef
          in: path
          description: "The provider of metadata.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available providers.\n"
          required: true
          schema:
            type: array
            default: '*'
          example: '*'
        - name: detail
          in: query
          description: "This attribute specifies the desired amount of information to be returned. For example, it is possible to instruct the web service to return only basic information about the metadataset (i.e.: id, dataprovider id, version and name).\n\nMost notably, metadata attributes of a metadataset will not be returned Possible values are:\n1. `full`: all available information for all returned metadatasets should be returned.\n2. `allstubs`: all returned metadatasets should be returned as stubs, i.e. only containing identification information and the metadataset' name.\n"
          schema:
            enum:
              - allstubs
              - full
            type: string
            default: allstubs
          example: allstubs
        - name: asOf
          in: query
          description: "Format - date-time (as date-time in RFC3339). Retrieve the resource as it was at the supplied point in time (aka time travel).\n"
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  metadataSets: [ ]
                meta:
                  contentLanguages:
                    - en
                  id: IDREF7221
                  prepared: '2023-08-17T03:11:32.0000000+00:00'
                  schema: https://raw.githubusercontent.com/sdmx-twg/sdmx-json/sdmx3.0.0/metadata-message/tools/schemas/2.0.0/sdmx-json-metadata-schema.json
                  sender:
                    id: unknown
                  test: false
  '/metadata/structure/{artefactType}/{agencyID}/{resourceID}/{version}':
    get:
      tags:
        - Metadata queries
      summary: 'Metadata Query [by Structure]'
      description: "These queries enable clients to request all metadata sets which are reported against one or more structures.\n\nAs such the syntax for defining which structures to find metadata for follows the same syntax as the structure queries.\n"
      operationId: get-metadata-structure-structuretype-agencyid-resourceid-version
      parameters:
        - name: artefactType
          in: path
          description: 'The type of structural metadata (e.g. codelist, dataflow, etc.)'
          required: true
          schema:
            enum:
              - datastructure
              - metadatastructure
              - dataflow
              - metadataflow
              - provisionagreement
              - structureset
              - process
              - categorisation
              - dataconstraint
              - metadataconstraint
              - conceptscheme
              - codelist
              - categoryscheme
              - hierarchy
              - hierarchyassociation
              - agencyscheme
              - dataproviderscheme
              - dataconsumerscheme
              - organisationunitscheme
              - transformationscheme
              - rulesetscheme
              - userdefinedoperatorscheme
              - customtypescheme
              - namepersonalisationscheme
              - vtlmappingscheme
              - valuelist
              - structuremap
              - representationmap
              - conceptschememap
              - categoryschememap
              - organisationschememap
              - reportingtaxonomymap
              - '*'
            type: string
            default: dataflow
          example: dataflow
        - name: agencyID
          in: path
          description: "The maintainer(s) of the artefacts.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available maintainers.\n"
          required: true
          schema:
            type: array
            default: '*'
          example: '*'
        - name: resourceID
          in: path
          description: "The artefact ID(s).\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n"
          required: true
          schema:
            type: array
            default: '*'
          example: '*'
        - name: version
          in: path
          description: "The version(s) of the artefact.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n\n`+` can be used to retrieve the latest stable version.\n\n`~` can be used to retrieve the latest version, regardless of its status (stable, draft, etc.).\n"
          required: true
          schema:
            type: array
            default: +
          example: +
        - name: detail
          in: query
          description: "This attribute specifies the desired amount of information to be returned. For example, it is possible to instruct the web service to return only basic information about the metadataset (i.e.: id, dataprovider id, version and name).\n\nMost notably, metadata attributes of a metadataset will not be returned Possible values are:\n1. `full`: all available information for all returned metadatasets should be returned.\n2. `allstubs`: all returned metadatasets should be returned as stubs, i.e. only containing identification information and the metadataset' name.\n"
          schema:
            enum:
              - allstubs
              - full
            type: string
            default: allstubs
          example: allstubs
        - name: asOf
          in: query
          description: "Format - date-time (as date-time in RFC3339). Retrieve the resource as it was at the supplied point in time (aka time travel).\n"
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  metadataSets: [ ]
                meta:
                  contentLanguages:
                    - en
                  id: IDREF7221
                  prepared: '2023-08-17T03:11:32.0000000+00:00'
                  schema: https://raw.githubusercontent.com/sdmx-twg/sdmx-json/sdmx3.0.0/metadata-message/tools/schemas/2.0.0/sdmx-json-metadata-schema.json
                  sender:
                    id: unknown
                  test: false
  '/structure/{structureType}/{agencyID}/{resourceID}/{version}/{itemID}':
    get:
      tags:
        - Structure queries
      summary: 'Structure Query [Structure Type, Agency, Resource, Version, Item]'
      description: "'Item queries extend structure queries by allowing to retrieve items in item schemes such as particular codes in a codelist.'\n"
      operationId: get-structure-structuretype-agencyid-resourceid-version-itemid
      parameters:
        - name: structureType
          in: path
          description: 'The type of structural metadata (e.g. codelist, dataflow, etc.)'
          required: true
          schema:
            enum:
              - datastructure
              - metadatastructure
              - dataflow
              - metadataflow
              - provisionagreement
              - structureset
              - process
              - categorisation
              - dataconstraint
              - metadataconstraint
              - conceptscheme
              - codelist
              - categoryscheme
              - hierarchy
              - hierarchyassociation
              - agencyscheme
              - dataproviderscheme
              - dataconsumerscheme
              - organisationunitscheme
              - transformationscheme
              - rulesetscheme
              - userdefinedoperatorscheme
              - customtypescheme
              - namepersonalisationscheme
              - vtlmappingscheme
              - valuelist
              - structuremap
              - representationmap
              - conceptschememap
              - categoryschememap
              - organisationschememap
              - reportingtaxonomymap
              - '*'
            type: string
            default: codelist
          example: codelist
        - name: agencyID
          in: path
          description: "The maintainer(s) of the artefacts.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available maintainers.\n"
          required: true
          schema:
            type: array
            default: IMF
          example: IMF
        - name: resourceID
          in: path
          description: "The artefact ID(s).\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n"
          required: true
          schema:
            type: array
            default: CL_COUNTRY
          example: CL_COUNTRY
        - name: version
          in: path
          description: "The version(s) of the artefact.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n\n`+` can be used to retrieve the latest stable version.\n\n`~` can be used to retrieve the latest version, regardless of its status (stable, draft, etc.).\n"
          required: true
          schema:
            type: array
            default: +
          example: +
        - name: itemID
          in: path
          description: "The id of the item to be returned. \n\nMultiple values are possible and `*` can be used as shortcut to select all items.\n"
          required: true
          schema:
            type: array
            default: 'CAN,USA'
          example: 'CAN,USA'
        - name: detail
          in: query
          description: "This attribute specifies the desired amount of information to be returned. For example, it is possible to instruct the web service to return only basic information about the maintainable artefact (i.e.: id, agency id, version and name). Most notably, items of item schemes will not be returned (for example, it will not return the codes in a code list query).\n\nPossible values are:\n\n`full` - all available information for all returned artefacts should be returned. Returned extended codelists are to be resolved, i.e. include all inherited codes, and must not include the CodelistExtension property. As the inherited codelists must be resolved, they should not be returned a second time as separated codelists.\n\n`allstubs` - all returned artefacts should be returned as stubs, i.e. only containing identification information and the artefacts' name.\n\n`referencestubs` - same as full with the exception that referenced artefacts should be returned only as stubs, i.e. only containing identification information and the artefacts' name.\n\n`allcompletestubs` all returned artefacts should be returned as complete stubs, i.e. only containing identification information, the artefacts' name, description and annotations.\n\n`referencecompletestubs` - same as full with the exception that referenced artefacts should be returned as complete stubs, i.e. only containing identification information, the artefacts' name, description and annotations.\n\n`referencepartial` - same as full with the exception that referenced item schemes should only include items used by the artefact to be returned.\n\n`raw` - same as full with the exception that the returned extended codelists are not resolved and must include the CodelistExtension property, and if referenced codelists or descendants are to be returned then they include also all inherited codelists."
          schema:
            enum:
              - full
              - allstubs
              - referencestubs
              - allcompletestubs
              - referencecompletestubs
              - referencepartial
              - raw
            type: string
            default: full
          example: full
        - name: references
          in: query
          description: "This attribute instructs the web service to return (or not) the artefacts referenced by the artefact to be returned (for example, the code lists and concepts used by the data structure definition matching the query), as well as the artefacts that use the matching artefact (for example, the dataflows that use the data structure definition matching the query).\n\nPossible values are:\n\n`none` - no references will be returned\n\n`parents` - the artefacts that use the artefact matching the query\n\n`parentsandsiblings` - the artefacts that use the artefact matching the query, as well as the artefacts referenced by these artefacts\n\n`ancestors` - the artefacts that use the artefact matching the query, up to any level\n\n`children` - artefacts referenced by the artefact to be returned\n\n`descendants` - references of references, up to any level, will also be returned\n\n`all` - the combination of parentsandsiblings and descendants.\n\nIn addition, a concrete type of resource may also be used (for example, `references`=`codelist`)."
          schema:
            type: array
            default: none
          example: none
        - name: asOf
          in: query
          description: "Format - date-time (as date-time in RFC3339). Retrieve the resource as it was at the supplied point in time (aka time travel).\n"
          schema:
            type: string
            format: date-time
        - name: Accept
          in: header
          description: "Specifies the output format. \n\n`application/json` (the default) indicates that output format is a json.\n"
          schema:
            enum:
              - application/json
              - application/xml
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  codeLists:
                    - agencyID: SDMX
                      annotations:
                        - id: origin
                          text: 
                          title: 
                          type: 
                          value: INTEGRATION
                        - id: isFinal
                          text: 
                          title: 
                          type: 
                          value: 
                        - id: lastUpdatedAt
                          text: 
                          title: 
                          type: 
                          value: '2023-02-21T07:31:30.0000000+00:00'
                      codes:
                        - annotations: [ ]
                          description: To be used for data collected or disseminated every year.
                          descriptions:
                            en: To be used for data collected or disseminated every year.
                          id: A
                          name: Annual
                          names:
                            en: Annual
                      description: 'This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept \u201Cfrequency\u201D may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.'
                      descriptions:
                        en: 'This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept \u201Cfrequency\u201D may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.'
                      id: CL_FREQ
                      isPartial: true
                      links:
                        - rel: self
                          type: codelist
                          urn: urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)
                      name: Frequency
                      names:
                        en: Frequency
                      version: '2.0'
                meta:
                  contentLanguages:
                    - en
                  id: IDREF9418
                  prepared: '2023-08-17T12:34:35.0000000+00:00'
                  schema: https://raw.githubusercontent.com/sdmx-twg/sdmx-json/sdmx3.0.0/metadata-message/tools/schemas/2.0.0/sdmx-json-metadata-schema.json
                  sender:
                    id: unknown
                  test: false
            application/xml:
              schema:
                type: object
              example: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<message:Structure xmlns:message=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/message\" xmlns:structure=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/structure\" xmlns:common=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/common\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xsi:schemaLocation=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/message ../../schemas/SDMXMessage.xsd\">\r\n    <message:Header>\r\n        <message:ID>IDREF6142</message:ID>\r\n        <message:Test>false</message:Test>\r\n        <message:Prepared>2023-08-17T14:39:32.567530217Z</message:Prepared>\r\n        <message:Sender id=\"unknown\"/>\r\n    </message:Header>\r\n    <message:Structures>\r\n        <structure:Codelists>\r\n            <structure:Codelist urn=\"urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)\" agencyID=\"SDMX\" id=\"CL_FREQ\" version=\"2.0\" isExternalReference=\"false\" isPartial=\"true\">\r\n                <common:Annotations>\r\n                    <common:Annotation id=\"origin\">\r\n                        <common:AnnotationValue>INTEGRATION</common:AnnotationValue>\r\n                    </common:Annotation>\r\n                    <common:Annotation id=\"isFinal\"/>\r\n                    <common:Annotation id=\"lastUpdatedAt\">\r\n                        <common:AnnotationValue>2023-02-21T19:31:30.726036Z</common:AnnotationValue>\r\n                    </common:Annotation>\r\n                </common:Annotations>\r\n                <common:Link url=\"urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)\" type=\"codelist\" rel=\"self\"/>\r\n                <common:Name xml:lang=\"en\">Frequency</common:Name>\r\n                <common:Description xml:lang=\"en\">This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept “frequency” may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.</common:Description>\r\n                <structure:Code id=\"A\">\r\n                    <common:Name xml:lang=\"en\">Annual</common:Name>\r\n                    <common:Description xml:lang=\"en\">To be used for data collected or disseminated every year.</common:Description>\r\n                </structure:Code>\r\n            </structure:Codelist>\r\n        </structure:Codelists>\r\n    </message:Structures>\r\n</message:Structure>"
  '/structure/{structureType}/{agencyID}/{resourceID}':
    get:
      tags:
        - Structure queries
      summary: 'Structure Query [Structure Type, Agency, Resource]'
      description: "Structure queries when no version and no item are specified. The version is equivalent to \"~\" and item is equivalent to \"*\".\n"
      operationId: get-structure-structuretype-agencyid-resourceid
      parameters:
        - name: structureType
          in: path
          description: 'The type of structural metadata (e.g. codelist, dataflow, etc.)'
          required: true
          schema:
            enum:
              - datastructure
              - metadatastructure
              - dataflow
              - metadataflow
              - provisionagreement
              - structureset
              - process
              - categorisation
              - dataconstraint
              - metadataconstraint
              - conceptscheme
              - codelist
              - categoryscheme
              - hierarchy
              - hierarchyassociation
              - agencyscheme
              - dataproviderscheme
              - dataconsumerscheme
              - organisationunitscheme
              - transformationscheme
              - rulesetscheme
              - userdefinedoperatorscheme
              - customtypescheme
              - namepersonalisationscheme
              - vtlmappingscheme
              - valuelist
              - structuremap
              - representationmap
              - conceptschememap
              - categoryschememap
              - organisationschememap
              - reportingtaxonomymap
              - '*'
            type: string
            default: codelist
          example: codelist
        - name: agencyID
          in: path
          description: "The maintainer(s) of the artefacts.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available maintainers.\n"
          required: true
          schema:
            type: array
            default: IMF
          example: IMF
        - name: resourceID
          in: path
          description: "The artefact ID(s).\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available artefacts.\n"
          required: true
          schema:
            type: array
            default: CL_COUNTRY
          example: CL_COUNTRY
        - name: detail
          in: query
          description: "This attribute specifies the desired amount of information to be returned. For example, it is possible to instruct the web service to return only basic information about the maintainable artefact (i.e.: id, agency id, version and name). Most notably, items of item schemes will not be returned (for example, it will not return the codes in a code list query).\n\nPossible values are:\n\n`full` - all available information for all returned artefacts should be returned. Returned extended codelists are to be resolved, i.e. include all inherited codes, and must not include the CodelistExtension property. As the inherited codelists must be resolved, they should not be returned a second time as separated codelists.\n\n`allstubs` - all returned artefacts should be returned as stubs, i.e. only containing identification information and the artefacts' name.\n\n`referencestubs` - same as full with the exception that referenced artefacts should be returned only as stubs, i.e. only containing identification information and the artefacts' name.\n\n`allcompletestubs` all returned artefacts should be returned as complete stubs, i.e. only containing identification information, the artefacts' name, description and annotations.\n\n`referencecompletestubs` - same as full with the exception that referenced artefacts should be returned as complete stubs, i.e. only containing identification information, the artefacts' name, description and annotations.\n\n`referencepartial` - same as full with the exception that referenced item schemes should only include items used by the artefact to be returned.\n\n`raw` - same as full with the exception that the returned extended codelists are not resolved and must include the CodelistExtension property, and if referenced codelists or descendants are to be returned then they include also all inherited codelists."
          schema:
            enum:
              - full
              - allstubs
              - referencestubs
              - allcompletestubs
              - referencecompletestubs
              - referencepartial
              - raw
            type: string
            default: full
          example: full
        - name: references
          in: query
          description: "This attribute instructs the web service to return (or not) the artefacts referenced by the artefact to be returned (for example, the code lists and concepts used by the data structure definition matching the query), as well as the artefacts that use the matching artefact (for example, the dataflows that use the data structure definition matching the query).\n\nPossible values are:\n\n`none` - no references will be returned\n\n`parents` - the artefacts that use the artefact matching the query\n\n`parentsandsiblings` - the artefacts that use the artefact matching the query, as well as the artefacts referenced by these artefacts\n\n`ancestors` - the artefacts that use the artefact matching the query, up to any level\n\n`children` - artefacts referenced by the artefact to be returned\n\n`descendants` - references of references, up to any level, will also be returned\n\n`all` - the combination of parentsandsiblings and descendants.\n\nIn addition, a concrete type of resource may also be used (for example, `references`=`codelist`)."
          schema:
            type: array
            default: none
          example: none
        - name: asOf
          in: query
          description: "Format - date-time (as date-time in RFC3339). Retrieve the resource as it was at the supplied point in time (aka time travel).\n"
          schema:
            type: string
            format: date-time
        - name: Accept
          in: header
          description: "Specifies the output format. \n\n`application/json` (the default) indicates that output format is a json.\n"
          schema:
            enum:
              - application/json
              - application/xml
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  codeLists:
                    - agencyID: SDMX
                      annotations:
                        - id: origin
                          text: 
                          title: 
                          type: 
                          value: INTEGRATION
                        - id: isFinal
                          text: 
                          title: 
                          type: 
                          value: 
                        - id: lastUpdatedAt
                          text: 
                          title: 
                          type: 
                          value: '2023-02-21T07:31:30.0000000+00:00'
                      codes:
                        - annotations: [ ]
                          description: To be used for data collected or disseminated every year.
                          descriptions:
                            en: To be used for data collected or disseminated every year.
                          id: A
                          name: Annual
                          names:
                            en: Annual
                      description: 'This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept \u201Cfrequency\u201D may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.'
                      descriptions:
                        en: 'This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept \u201Cfrequency\u201D may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.'
                      id: CL_FREQ
                      isPartial: true
                      links:
                        - rel: self
                          type: codelist
                          urn: urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)
                      name: Frequency
                      names:
                        en: Frequency
                      version: '2.0'
                meta:
                  contentLanguages:
                    - en
                  id: IDREF9418
                  prepared: '2023-08-17T12:34:35.0000000+00:00'
                  schema: https://raw.githubusercontent.com/sdmx-twg/sdmx-json/sdmx3.0.0/metadata-message/tools/schemas/2.0.0/sdmx-json-metadata-schema.json
                  sender:
                    id: unknown
                  test: false
            application/xml:
              schema:
                type: object
              example: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<message:Structure xmlns:message=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/message\" xmlns:structure=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/structure\" xmlns:common=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/common\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xsi:schemaLocation=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/message ../../schemas/SDMXMessage.xsd\">\r\n    <message:Header>\r\n        <message:ID>IDREF6142</message:ID>\r\n        <message:Test>false</message:Test>\r\n        <message:Prepared>2023-08-17T14:39:32.567530217Z</message:Prepared>\r\n        <message:Sender id=\"unknown\"/>\r\n    </message:Header>\r\n    <message:Structures>\r\n        <structure:Codelists>\r\n            <structure:Codelist urn=\"urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)\" agencyID=\"SDMX\" id=\"CL_FREQ\" version=\"2.0\" isExternalReference=\"false\" isPartial=\"true\">\r\n                <common:Annotations>\r\n                    <common:Annotation id=\"origin\">\r\n                        <common:AnnotationValue>INTEGRATION</common:AnnotationValue>\r\n                    </common:Annotation>\r\n                    <common:Annotation id=\"isFinal\"/>\r\n                    <common:Annotation id=\"lastUpdatedAt\">\r\n                        <common:AnnotationValue>2023-02-21T19:31:30.726036Z</common:AnnotationValue>\r\n                    </common:Annotation>\r\n                </common:Annotations>\r\n                <common:Link url=\"urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)\" type=\"codelist\" rel=\"self\"/>\r\n                <common:Name xml:lang=\"en\">Frequency</common:Name>\r\n                <common:Description xml:lang=\"en\">This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept “frequency” may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.</common:Description>\r\n                <structure:Code id=\"A\">\r\n                    <common:Name xml:lang=\"en\">Annual</common:Name>\r\n                    <common:Description xml:lang=\"en\">To be used for data collected or disseminated every year.</common:Description>\r\n                </structure:Code>\r\n            </structure:Codelist>\r\n        </structure:Codelists>\r\n    </message:Structures>\r\n</message:Structure>"
  '/structure/{structureType}/{agencyID}':
    get:
      tags:
        - Structure queries
      summary: 'Structure Query [Structure Type, Agency]'
      description: 'Structure queries when no resource, no version and no item are specified. The resource is equivalent to "*", the version is equivalent to "~" and item is equivalent to "*".'
      operationId: get-structure-structuretype-agencyid
      parameters:
        - name: structureType
          in: path
          description: 'The type of structural metadata (e.g. codelist, dataflow, etc.)'
          required: true
          schema:
            enum:
              - datastructure
              - metadatastructure
              - dataflow
              - metadataflow
              - provisionagreement
              - structureset
              - process
              - categorisation
              - dataconstraint
              - metadataconstraint
              - conceptscheme
              - codelist
              - categoryscheme
              - hierarchy
              - hierarchyassociation
              - agencyscheme
              - dataproviderscheme
              - dataconsumerscheme
              - organisationunitscheme
              - transformationscheme
              - rulesetscheme
              - userdefinedoperatorscheme
              - customtypescheme
              - namepersonalisationscheme
              - vtlmappingscheme
              - valuelist
              - structuremap
              - representationmap
              - conceptschememap
              - categoryschememap
              - organisationschememap
              - reportingtaxonomymap
              - '*'
            type: string
            default: codelist
          example: codelist
        - name: agencyID
          in: path
          description: "The maintainer(s) of the artefacts.\n\nMultiple values can be selected by using `,` as a separator. `*` can be used as shortcut to select all available maintainers.\n"
          required: true
          schema:
            type: array
            default: IMF
          example: IMF
        - name: detail
          in: query
          description: "This attribute specifies the desired amount of information to be returned. For example, it is possible to instruct the web service to return only basic information about the maintainable artefact (i.e.: id, agency id, version and name). Most notably, items of item schemes will not be returned (for example, it will not return the codes in a code list query).\n\nPossible values are:\n\n`full` - all available information for all returned artefacts should be returned. Returned extended codelists are to be resolved, i.e. include all inherited codes, and must not include the CodelistExtension property. As the inherited codelists must be resolved, they should not be returned a second time as separated codelists.\n\n`allstubs` - all returned artefacts should be returned as stubs, i.e. only containing identification information and the artefacts' name.\n\n`referencestubs` - same as full with the exception that referenced artefacts should be returned only as stubs, i.e. only containing identification information and the artefacts' name.\n\n`allcompletestubs` all returned artefacts should be returned as complete stubs, i.e. only containing identification information, the artefacts' name, description and annotations.\n\n`referencecompletestubs` - same as full with the exception that referenced artefacts should be returned as complete stubs, i.e. only containing identification information, the artefacts' name, description and annotations.\n\n`referencepartial` - same as full with the exception that referenced item schemes should only include items used by the artefact to be returned.\n\n`raw` - same as full with the exception that the returned extended codelists are not resolved and must include the CodelistExtension property, and if referenced codelists or descendants are to be returned then they include also all inherited codelists."
          schema:
            enum:
              - full
              - allstubs
              - referencestubs
              - allcompletestubs
              - referencecompletestubs
              - referencepartial
              - raw
            type: string
            default: full
          example: full
        - name: references
          in: query
          description: "This attribute instructs the web service to return (or not) the artefacts referenced by the artefact to be returned (for example, the code lists and concepts used by the data structure definition matching the query), as well as the artefacts that use the matching artefact (for example, the dataflows that use the data structure definition matching the query).\n\nPossible values are:\n\n`none` - no references will be returned\n\n`parents` - the artefacts that use the artefact matching the query\n\n`parentsandsiblings` - the artefacts that use the artefact matching the query, as well as the artefacts referenced by these artefacts\n\n`ancestors` - the artefacts that use the artefact matching the query, up to any level\n\n`children` - artefacts referenced by the artefact to be returned\n\n`descendants` - references of references, up to any level, will also be returned\n\n`all` - the combination of parentsandsiblings and descendants.\n\nIn addition, a concrete type of resource may also be used (for example, `references`=`codelist`)."
          schema:
            type: array
            default: none
          example: none
        - name: asOf
          in: query
          description: "Format - date-time (as date-time in RFC3339). Retrieve the resource as it was at the supplied point in time (aka time travel).\n"
          schema:
            type: string
            format: date-time
        - name: Accept
          in: header
          description: "Specifies the output format. \n\n`application/json` (the default) indicates that output format is a json.\n"
          schema:
            enum:
              - application/json
              - application/xml
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  codeLists:
                    - agencyID: SDMX
                      annotations:
                        - id: origin
                          text: 
                          title: 
                          type: 
                          value: INTEGRATION
                        - id: isFinal
                          text: 
                          title: 
                          type: 
                          value: 
                        - id: lastUpdatedAt
                          text: 
                          title: 
                          type: 
                          value: '2023-02-21T07:31:30.0000000+00:00'
                      codes:
                        - annotations: [ ]
                          description: To be used for data collected or disseminated every year.
                          descriptions:
                            en: To be used for data collected or disseminated every year.
                          id: A
                          name: Annual
                          names:
                            en: Annual
                      description: 'This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept \u201Cfrequency\u201D may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.'
                      descriptions:
                        en: 'This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept \u201Cfrequency\u201D may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.'
                      id: CL_FREQ
                      isPartial: true
                      links:
                        - rel: self
                          type: codelist
                          urn: urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)
                      name: Frequency
                      names:
                        en: Frequency
                      version: '2.0'
                meta:
                  contentLanguages:
                    - en
                  id: IDREF9418
                  prepared: '2023-08-17T12:34:35.0000000+00:00'
                  schema: https://raw.githubusercontent.com/sdmx-twg/sdmx-json/sdmx3.0.0/metadata-message/tools/schemas/2.0.0/sdmx-json-metadata-schema.json
                  sender:
                    id: unknown
                  test: false
            application/xml:
              schema:
                type: object
              example: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<message:Structure xmlns:message=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/message\" xmlns:structure=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/structure\" xmlns:common=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/common\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xsi:schemaLocation=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/message ../../schemas/SDMXMessage.xsd\">\r\n    <message:Header>\r\n        <message:ID>IDREF6142</message:ID>\r\n        <message:Test>false</message:Test>\r\n        <message:Prepared>2023-08-17T14:39:32.567530217Z</message:Prepared>\r\n        <message:Sender id=\"unknown\"/>\r\n    </message:Header>\r\n    <message:Structures>\r\n        <structure:Codelists>\r\n            <structure:Codelist urn=\"urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)\" agencyID=\"SDMX\" id=\"CL_FREQ\" version=\"2.0\" isExternalReference=\"false\" isPartial=\"true\">\r\n                <common:Annotations>\r\n                    <common:Annotation id=\"origin\">\r\n                        <common:AnnotationValue>INTEGRATION</common:AnnotationValue>\r\n                    </common:Annotation>\r\n                    <common:Annotation id=\"isFinal\"/>\r\n                    <common:Annotation id=\"lastUpdatedAt\">\r\n                        <common:AnnotationValue>2023-02-21T19:31:30.726036Z</common:AnnotationValue>\r\n                    </common:Annotation>\r\n                </common:Annotations>\r\n                <common:Link url=\"urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)\" type=\"codelist\" rel=\"self\"/>\r\n                <common:Name xml:lang=\"en\">Frequency</common:Name>\r\n                <common:Description xml:lang=\"en\">This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept “frequency” may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.</common:Description>\r\n                <structure:Code id=\"A\">\r\n                    <common:Name xml:lang=\"en\">Annual</common:Name>\r\n                    <common:Description xml:lang=\"en\">To be used for data collected or disseminated every year.</common:Description>\r\n                </structure:Code>\r\n            </structure:Codelist>\r\n        </structure:Codelists>\r\n    </message:Structures>\r\n</message:Structure>"
  '/structure/{structureType}':
    get:
      tags:
        - Structure queries
      summary: 'Structure Query [Structure Type]'
      description: "Structure queries when no agency, no resource, no version and no item are specified. The agency is equivalent to \"*\", resource is equivalent to \"*\", the version is equivalent to \"~\" and item is equivalent to \"*\".\n"
      operationId: get-structure-structuretype
      parameters:
        - name: structureType
          in: path
          description: 'The type of structural metadata (e.g. codelist, dataflow, etc.)'
          required: true
          schema:
            enum:
              - datastructure
              - metadatastructure
              - dataflow
              - metadataflow
              - provisionagreement
              - structureset
              - process
              - categorisation
              - dataconstraint
              - metadataconstraint
              - conceptscheme
              - codelist
              - categoryscheme
              - hierarchy
              - hierarchyassociation
              - agencyscheme
              - dataproviderscheme
              - dataconsumerscheme
              - organisationunitscheme
              - transformationscheme
              - rulesetscheme
              - userdefinedoperatorscheme
              - customtypescheme
              - namepersonalisationscheme
              - vtlmappingscheme
              - valuelist
              - structuremap
              - representationmap
              - conceptschememap
              - categoryschememap
              - organisationschememap
              - reportingtaxonomymap
              - '*'
            type: string
            default: codelist
          example: codelist
        - name: detail
          in: query
          description: "This attribute specifies the desired amount of information to be returned. For example, it is possible to instruct the web service to return only basic information about the maintainable artefact (i.e.: id, agency id, version and name). Most notably, items of item schemes will not be returned (for example, it will not return the codes in a code list query).\n\nPossible values are:\n\n`full` - all available information for all returned artefacts should be returned. Returned extended codelists are to be resolved, i.e. include all inherited codes, and must not include the CodelistExtension property. As the inherited codelists must be resolved, they should not be returned a second time as separated codelists.\n\n`allstubs` - all returned artefacts should be returned as stubs, i.e. only containing identification information and the artefacts' name.\n\n`referencestubs` - same as full with the exception that referenced artefacts should be returned only as stubs, i.e. only containing identification information and the artefacts' name.\n\n`allcompletestubs` all returned artefacts should be returned as complete stubs, i.e. only containing identification information, the artefacts' name, description and annotations.\n\n`referencecompletestubs` - same as full with the exception that referenced artefacts should be returned as complete stubs, i.e. only containing identification information, the artefacts' name, description and annotations.\n\n`referencepartial` - same as full with the exception that referenced item schemes should only include items used by the artefact to be returned.\n\n`raw` - same as full with the exception that the returned extended codelists are not resolved and must include the CodelistExtension property, and if referenced codelists or descendants are to be returned then they include also all inherited codelists."
          schema:
            enum:
              - full
              - allstubs
              - referencestubs
              - allcompletestubs
              - referencecompletestubs
              - referencepartial
              - raw
            type: string
            default: full
          example: full
        - name: references
          in: query
          description: "This attribute instructs the web service to return (or not) the artefacts referenced by the artefact to be returned (for example, the code lists and concepts used by the data structure definition matching the query), as well as the artefacts that use the matching artefact (for example, the dataflows that use the data structure definition matching the query).\n\nPossible values are:\n\n`none` - no references will be returned\n\n`parents` - the artefacts that use the artefact matching the query\n\n`parentsandsiblings` - the artefacts that use the artefact matching the query, as well as the artefacts referenced by these artefacts\n\n`ancestors` - the artefacts that use the artefact matching the query, up to any level\n\n`children` - artefacts referenced by the artefact to be returned\n\n`descendants` - references of references, up to any level, will also be returned\n\n`all` - the combination of parentsandsiblings and descendants.\n\nIn addition, a concrete type of resource may also be used (for example, `references`=`codelist`)."
          schema:
            type: array
            default: none
          example: none
        - name: asOf
          in: query
          description: "Format - date-time (as date-time in RFC3339). Retrieve the resource as it was at the supplied point in time (aka time travel).\n"
          schema:
            type: string
            format: date-time
        - name: Accept
          in: header
          description: "Specifies the output format. \n\n`application/json` (the default) indicates that output format is a json.\n"
          schema:
            enum:
              - application/json
              - application/xml
            type: string
          example: application/json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              example:
                data:
                  codeLists:
                    - agencyID: SDMX
                      annotations:
                        - id: origin
                          text: 
                          title: 
                          type: 
                          value: INTEGRATION
                        - id: isFinal
                          text: 
                          title: 
                          type: 
                          value: 
                        - id: lastUpdatedAt
                          text: 
                          title: 
                          type: 
                          value: '2023-02-21T07:31:30.0000000+00:00'
                      codes:
                        - annotations: [ ]
                          description: To be used for data collected or disseminated every year.
                          descriptions:
                            en: To be used for data collected or disseminated every year.
                          id: A
                          name: Annual
                          names:
                            en: Annual
                      description: 'This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept \u201Cfrequency\u201D may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.'
                      descriptions:
                        en: 'This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept \u201Cfrequency\u201D may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.'
                      id: CL_FREQ
                      isPartial: true
                      links:
                        - rel: self
                          type: codelist
                          urn: urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)
                      name: Frequency
                      names:
                        en: Frequency
                      version: '2.0'
                meta:
                  contentLanguages:
                    - en
                  id: IDREF9418
                  prepared: '2023-08-17T12:34:35.0000000+00:00'
                  schema: https://raw.githubusercontent.com/sdmx-twg/sdmx-json/sdmx3.0.0/metadata-message/tools/schemas/2.0.0/sdmx-json-metadata-schema.json
                  sender:
                    id: unknown
                  test: false
            application/xml:
              schema:
                type: object
              example: "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<message:Structure xmlns:message=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/message\" xmlns:structure=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/structure\" xmlns:common=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/common\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xml=\"http://www.w3.org/XML/1998/namespace\" xsi:schemaLocation=\"http://www.sdmx.org/resources/sdmxml/schemas/v3_0/message ../../schemas/SDMXMessage.xsd\">\r\n    <message:Header>\r\n        <message:ID>IDREF6142</message:ID>\r\n        <message:Test>false</message:Test>\r\n        <message:Prepared>2023-08-17T14:39:32.567530217Z</message:Prepared>\r\n        <message:Sender id=\"unknown\"/>\r\n    </message:Header>\r\n    <message:Structures>\r\n        <structure:Codelists>\r\n            <structure:Codelist urn=\"urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)\" agencyID=\"SDMX\" id=\"CL_FREQ\" version=\"2.0\" isExternalReference=\"false\" isPartial=\"true\">\r\n                <common:Annotations>\r\n                    <common:Annotation id=\"origin\">\r\n                        <common:AnnotationValue>INTEGRATION</common:AnnotationValue>\r\n                    </common:Annotation>\r\n                    <common:Annotation id=\"isFinal\"/>\r\n                    <common:Annotation id=\"lastUpdatedAt\">\r\n                        <common:AnnotationValue>2023-02-21T19:31:30.726036Z</common:AnnotationValue>\r\n                    </common:Annotation>\r\n                </common:Annotations>\r\n                <common:Link url=\"urn:sdmx:org.sdmx.infomodel.codelist.Codelist=SDMX:CL_FREQ(2.0)\" type=\"codelist\" rel=\"self\"/>\r\n                <common:Name xml:lang=\"en\">Frequency</common:Name>\r\n                <common:Description xml:lang=\"en\">This code list provides a set of values indicating the \"frequency\" of the data (e.g. weekly, monthly, quarterly). The concept “frequency” may refer to various stages in the production process, e.g. data collection or data dissemination. For example, a time series could be disseminated at annual frequency but the underlying data are compiled monthly. The code list is applicable for all different uses of \"frequency\". This code list was formally adopted on 4 December 2013. More information about and supporting material for this code list and SDMX code lists in general (e.g. list of generic codes for expressing general concepts like \"Total\", \"Unknown\", etc.; syntaxes for the creation of further codes; general guidelines for the creation of SDMX code lists) can be found at this address: https://sdmx.org/?page_id=4345.</common:Description>\r\n                <structure:Code id=\"A\">\r\n                    <common:Name xml:lang=\"en\">Annual</common:Name>\r\n                    <common:Description xml:lang=\"en\">To be used for data collected or disseminated every year.</common:Description>\r\n                </structure:Code>\r\n            </structure:Codelist>\r\n        </structure:Codelists>\r\n    </message:Structures>\r\n</message:Structure>"
components:
  schemas:
    StreamingResponseBody:
      type: object
  securitySchemes:
    apiKeyHeader:
      type: apiKey
      name: Ocp-Apim-Subscription-Key
      in: header
    apiKeyQuery:
      type: apiKey
      name: subscription-key
      in: query
security:
  - apiKeyHeader: [ ]
  - apiKeyQuery: [ ]